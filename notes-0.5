
NVIM v0.5.0

This release represents ~4000 commits since v0.4.4, the previous
non-maintenance release.  Highlights include builtin support
for LSP and tree-sitter, as well as vast improvements to lua
as a plugin and configuration language.



FEATURES:

New API functions:
  nvim_exec: execute multiline vim script blocks
  nvim_get_hl_id_by_name: Gets a highight definition by name
  nvim_exec_lua: new name for nvim_execute_lua
  nvim_notify: Notify the user with a message
  nvim_get_runtime_file: Find files in runtime directories
  nvim_get_all_options_info: Get option information for all options
  nvim_get_option_info: Get option information for one option
  nvim_echo: Echo a message with highlights
  nvim_open_term: Open a virtual terminal in a buffer
  nvim_chan_send: send data to a channel. (like chansend() but supports lua strings)
  nvim_set_decoration_provider: callback driven decoration API for a namespace

  nvim_buf_set_text: Set/replace a character range in a buffer
  nvim_buf_delete: Delete the buffer. |:bwipeout|
  nvim_buf_get_extmark_by_id: Returns position for a given extmark id.
  nvim_buf_get_extmarks: get extmarks in traversal order.
  nvim_buf_set_extmark: Creates or updates an extmark.

  nvim_buf_del_extmark: Removes an extmark.
  nvim_buf_call: call a function with buffer as temporary current buffer

  nvim_win_hide: Closes the window and hide the buffer it contains |:hide|
  nvim_win_call: Calls a function with window as temporary current window.

New UI events:
  redraw.screenshot
  redraw.win_viewport

Lua:
    767cd8b17 #12235 startup: add init.lua as an alternative user config
    687eb0b39 #14686 feat(startup): Source runtime/plugin/**/*.lua at startup
    #14686 runtime: allow lua in various runtime search paths such as
           syntax/ ftdetect/ indent/ ftplugin/ compiler/ colors/
    bc86f76c0 api/buffer: add "on_bytes" callback to nvim_buf_attach
    43956dea5 #13479 lua: Add vim.opt and fix scopes of vim.o

Tree-sitter:
  Note: tree-sitter is considered experimental for 0.5. There's remaining
  bugs for buffer parsing, as well as known performance issues for
  large files and injected (nested) languages.

  e93342629 #10124 Tree-sitter API for lua
  8bea39f37 feat(treesitter): allow injections to be configured through directives
  929f19414 feat(treesitter): add offset predicate for language injection
  cd75d3289 #14200 feat: treesitter checkhealth
  1a631026a feat(treesitter): add language tree
  d3f544002 treesitter: runtime queries
  3c5141d2c #13008 treesitter: add string parser
  9437327d5 treesitter: use new on_bytes interface
  e4b5efa51 treesitter: use decoration provider API

LSP client:
00dc12c5d #11336 lua LSP client: initial implementation
d5aaad14e #11430 Followup improvements to LSP
ee7ac469c #11578 LSP: Use async completion for omnifunc.
070bd3ea2 #11604 LSP: shrink API, improve docs
25afa10f9 #11669 Merge 'LSP: differentiate diagnostic underline by severity'
e956ea767 #11777 LSP: show diagnostic in qf/loclist
dd8b29cfe #11838 LSP: set InitializeParams.rootPath value
0c5d2ffeb #11837 Merge 'LSP: fixes, improve test visibility'
ca8699378 #11638 LSP: implement documentHighlight
    220a2b05c LSP/references: Add context to locations returned by server
    ccb038dc6 LSP/completion: add textEdit support
da6f38ab3 #12313 LSP: Add workspace.applyEdit client capabilities
f559e5249 #11607 LSP: Add textDocument/codeAction support
0d83a1c43 #12638 LSP: Feature/add workspace folders
fd507e278 #13641 LSP: window/showMessageRequest
    e467d2939 LSP: Move workspace/configuration handler from nvim-lspconfig to core
  
